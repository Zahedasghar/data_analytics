Most examples come from
https://foresightbi.com.ng/microsoft-power-bi/dirty-data-samples-to-practice-on/


# Example 1

```{r}
setwd(here::here('14_janitor_excel'))
readxl::read_xlsx(
  '1.-Badly-Structured-Sales-Data-1.xlsx',
  sheet = 'Dirty 1'
)
```



```{r}
library(tidyverse)
readxl::read_xlsx(
  '1.-Badly-Structured-Sales-Data-1.xlsx',
  sheet = 'Dirty 1',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  select(!starts_with('x'))
```



```{r}
readxl::read_xlsx(
  '1.-Badly-Structured-Sales-Data-1.xlsx',
  sheet = 'Dirty 1',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  select(!starts_with('x')) |> 
  rename(order_id = 'ship_mode') |> 
  slice(-1)
```




```{r}
segments <- c('consumer', 'corporate', 'home_office')
ship_modes <- c('first_class', 'same_day', 'second_class', 'standard_class')
group_shipping_names <- paste0(
  rep(segments, each = length(ship_modes)),
  '_',
  rep(ship_modes, length(segments))
)
readxl::read_xlsx(
  '1.-Badly-Structured-Sales-Data-1.xlsx',
  sheet = 'Dirty 1',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  select(!starts_with('x')) |> 
  rename(order_id = 'ship_mode') |> 
  slice(-1) |> 
  rename_with(
    ~c('order_id', group_shipping_names)
  )
```



```{r}
readxl::read_xlsx(
  '1.-Badly-Structured-Sales-Data-1.xlsx',
  sheet = 'Dirty 1',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  select(!starts_with('x')) |> 
  rename(order_id = 'ship_mode') |> 
  slice(-1) |> 
  rename_with(
    ~c('order_id', group_shipping_names)
  ) |> 
  pivot_longer(
    cols = -1,
    names_pattern = glue::glue(
      '({paste0(segments, collapse = "|")})_(.*)'
    ),
    names_to = c('segment', 'shipping_mode'),
    values_drop_na = TRUE
  ) |> 
  arrange(segment, shipping_mode, order_id)
```



# Example 2

- No need to skip total columns (there are none)
- Instead of order_id we have order_date
- Second Excel file was created from first file by removing total columns and replacing order_ids with dates

```{r}
readxl::read_xlsx(
  '2.-Badly-Structured-Sales-Data-2.xlsx',
  sheet = 'Dirty 2',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  slice(-1) |> 
  rename_with(
    ~c('order_date', group_shipping_names)
  ) |> 
  pivot_longer(
    cols = -1,
    names_pattern = glue::glue(
      '({paste0(segments, collapse = "|")})_(.*)'
    ),
    names_to = c('segment', 'shipping_mode'),
    values_drop_na = TRUE
  ) |> 
  arrange(segment, shipping_mode, order_date)
```


Finally, what's left to do is to fix the dates.
Janitor has an excellent function for that.

```{r}
readxl::read_xlsx(
  '2.-Badly-Structured-Sales-Data-2.xlsx',
  sheet = 'Dirty 2',
  skip = 1,
  .name_repair = janitor::make_clean_names
) |> 
  rename(order_date = 'segment') |> 
  slice(-1) |> 
  rename_with(
    ~c('order_date', group_shipping_names)
  ) |> 
  pivot_longer(
    cols = -1,
    names_pattern = glue::glue(
      '({paste0(segments, collapse = "|")})_(.*)'
    ),
    names_to = c('segment', 'shipping_mode'),
    values_drop_na = TRUE
  ) |> 
  arrange(segment, shipping_mode, order_date) |> 
  mutate(
    order_date = as.numeric(order_date),
    order_date = janitor::excel_numeric_to_date(order_date)
  )
```


# Example 3

- Watch out for white spaces in regex
- You could either try to fix all of this in one regex or do some light cleaning afterwards

```{r}
readxl::read_xlsx(
  '5.-Jumbled-up-Customers-Details.xlsx',
  sheet = 'Dirty 5',
  .name_repair = janitor::make_clean_names,
  col_names = FALSE
) |> 
  separate(
    col = 1,
    into = c('name', 'address', 'age', 'gender'),
    sep = ' (Name|Address|Age|Gender) '
  ) |> 
  mutate(
    name = str_remove(name, 'Name '),
    address = str_trim(address)
  )
```


# Example 4

Watch out file was wrongly labeled but sheet names inside the file are correct
I include dots in measure extraction as well. 
Could sometimes be useful.

```{r}
readxl::read_xlsx(
  '7.-Medicine-Data-with-lumped-Quantity-and-Measure.xlsx',
  sheet = 'Dirty 6',
  .name_repair = janitor::make_clean_names
) |> 
  mutate(
    measure = str_extract(quantity, '[a-zA-Z\\.]+'),
    quantity = parse_number(quantity)
  ) 
```



## Example 5

Replace 
- all 'o's with an actual 0
- all 'i's with a 1 (if that's correct)
- all 'S's with a 5 (if that's correct)

You can detect it by looking for left-aligned texts in the Excel file.

```{r}
replacement_vector <- c(
  'i' = '1',
  'I' = '1',
  'o' = '0',
  'O' = '0',
  's' = '5',
  'S' = '5'
) 
readxl::read_xlsx(
  '6.-Hospital-Data-with-Mixed-Numbers-and-Characters.xlsx',
  sheet = 'Dirty 7',
  .name_repair = janitor::make_clean_names
) |> 
  mutate(
    across(
      .cols = -(1:2),
      .fns = \(x) str_replace_all(x, replacement_vector)
    )
  ) |> 
  print(n = 20)
```


# Example 6

Escape | sign in str_split()

```{r}
readxl::read_xlsx(
  '8.-Invoices-with-Merged-Categories-and-Merged-Amounts.xlsx',
  sheet = 'Dirty 8',
  .name_repair = janitor::make_clean_names
) |> 
  mutate(
    across(
      .cols = -1,
      .fns = \(x) str_split(x, ' \\| ')
    )
  ) |> 
  unnest(cols = -1)
```


# Example 7

From Janitor package
https://github.com/sfirke/janitor/blob/main/dirty_data.xlsx

Remove empty rows and columns with `remove_empty`.
Remove constant columns with `remove_constant()` (in this case `active` column)

```{r}
readxl::read_xlsx(
  'dirty_data.xlsx',
  skip = 1,
   .name_repair = janitor::make_clean_names
) |> 
  janitor::remove_empty() |> 
  janitor::remove_constant() |> 
  mutate(
    hire_date = janitor::excel_numeric_to_date(hire_date)
  )
```